#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    stages {

        stage("Build") {
            steps { 
                buildApp() 
                }
		}

        stage("Deploy - Dev") {
            steps { 
                deploy(environment : "dev") 
                }
		}

        stage("Deploy - Stage") {
            steps {
                 deploy("stage") 
                 }
		}

        stage("Approve") {
            steps { 
                approve() 
                }
		}

        stage("Deploy - Live") {
            steps {
                 deploy(environment : "live",params : null) 
                 }
		}   
	}

}
def approve() {
	timeout(time:1, unit:'DAYS') {
		input('Do you want to deploy to live?')
	}

}


def buildApp() {
    sh "/usr/local/Cellar/maven/3.6.3_1/libexec/bin/mvn clean install"
	sh "/usr/local/bin/docker image build -t sapkalrohit007/spring-boot:${BUILD_NUMBER} ."
}

def deploy(environment, params) {

	def containerName = ''
	def port = ''

	if ("${environment}" == 'dev') {
		containerName = "app_dev"
		port = "8888"
	} 
	else if ("${environment}" == 'stage') {
		containerName = "app_stage"
		port = "88"
	}
	else if ("${environment}" == 'live') {
		containerName = "app_live"
		port = "80"
	}
	else {
		println "Environment not valid"
		System.exit(0)
	}

	sh "/usr/local/bin/docker  ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
	sh "/usr/local/bin/docker  ps -a -f name=${containerName} -q | xargs -r docker rm"
	sh "/usr/local/bin/docker  run -d -p ${port}:8080 --name ${containerName} sapkalrohit007/spring-boot:${BUILD_NUMBER}"

}

